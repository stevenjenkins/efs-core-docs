
=head1 EFS Compilers: Gcc

This document explains how the GNU compiler suite is integrated with
EFS, and how multiple versions of the compiler are able to peacefully
co-exist, without any local package installation on the EFS clients.

In a traditional UNIX/Linux installation, the compiler is integrated
with the core OS, and switching from one compiler to another requires
changing the versions of many of locally installed packages.
Upgrading gcc usually requires upgrading binutils, as well as the
runtime shared libraries such as libstdc++.so, which can impact
existing, installed applications.

In EFS, we have integrated gcc and it's related development tools with
the /efs namespace, and avoided the dependency on almost all of the
locally installed packages required to use gcc, which allows us to
deploy as many specific gcc versions side by side as necessary.

In addition, we make the official releases from gcc.gnu.org, and the
specific vendor releases of gcc from the distribution vendors
available side by side, so that development teams can be feature for
feature (and bug for bug) compatible with thier compiler of choice.

=head2 Gcc-related EFS Projects

The gnu metaproj is intended to provide specific release of each
project from gnu.org, and therefore the binutils, gcc, gmp and mpfr
releases are all managed in these projects:

    gnu/binutils
    gnu/gmp
    gnu/mpfr
    gnu/gcc

Since the release of the gcc 4.5 series, there is an additional
dependency on the mpc product, which is not released on gnu.org, so
that is installed in the generic "open source software" metaproj:

    oss/mpc

The vendor distribution specific gcc releases, which so far only
includes the compilers for RHEL, are deployed in projects of the same
name, but in the distribution-specific metaproj, in this case "rhel".
RedHat does not provide a source rpm for either gmp or mpfr, so these
builds depend on the gnu/gmp and gnu/mpfr projects, but both binutils
and gcc are built from RHEL source rpms, and managed in:

    rhel/binutils
    rhel/gcc

As we extend EFS support to additional Linux distributions (and
possibly other commercial UNIX implementations as well), we will most
likely provide similar releases in projects such as debian/binutils
and debian/gcc.

In additon to these projects, where the full installation of each
product is installed for use by developers, we create runtime-only
copies of the gcc shared libraries for each gcc release in:

    gnu/gcclib
    rhel/gcclib

This is a very important customization.  As this document will explain
in detail, gcc has been engineered to automatically create RPATH
entries such that the binaries it links have dependencies on the
shared libraries in these minimal gcclib projects, not on the full gcc
installation itself.  This allows us to decommission gcc releases and
remove them from the namespace while leaving the runtime dependencies
alone.

=head1 Building gcc

=head2 Prerequisites: binutils, gmp, mpfr, and/or mpc

Before we can compile any release of gcc into EFS, we need to first
build 3 or 4 prerequisites.  There are usually specific feature
dependencies from each major gcc release on at least a minimal version
of binutils, for example, and as you will see we set up gcc to find an
EFS-based ld and as by default.  Since the EFS based gcc builds
support fortran, as well as C, C++, and objective C, we also need EFS
based builds of gmp and mpfr.  As of gcc 4.5, gcc also depends on the
mpc product as well.

Each of these are very straight forward to build into /efs, and the
downloadable EFS releases for each of these products will include the
efsdeploy configuration to automate it.  When bootstrapping the
namespace for the first time, these builds must be done on client
platforms that have a local installation of gcc, but once you have gcc
built into EFS, installing gcc locally will no longer be required.

In order to make this process clear, let's walk through a specific
example of first building gcc-4.5.2, and then the RHEL5 4.1.2
compiler.  In all cases, the specific versions used are current at the
time of this writing, and may or may not have been upgraded recently.

=head3 Building gnu/binutils



=head1 Using gcc



=cut    
