
=head1 Setting up the Development Environment

=head2 Building the test.efs Virtual Machines

In order to run the real EFS test suite (the code under test/, not the
placeholder under t/), requires setting up at least two machines.  The
test suite simulates a real EFS domain with two dev cells and a single
prod cell.  These machines have to be set up with a number of
requirements, and getting an arbitrary pair of machines configured by
hand is very tedious.

The EFS team uses VM infrastructure to setup and run the test suite,
all of which is automated using the efs_virtual_machine script in the
efs-utils git repo.  Setting this up requires a total of 3 VMs: one to
provide the core network services required by the test suite, but not
managed directly by EFS.  For example: Kerberos, NIS, DNS, etc.  The
other two machines are ones that run the EFS test suite.

First, create three "raw" VMs.  We create these by installing the
simplest, minimal set of software when installing the OS, and then let
the efs_virtual_machine script handle the rest.  Note that the VM
templates need to have a number of optional packages installed already
though.   See the documentation for efs-utils here:

L<http://docs.openefs.org/efs-utils/>

=head3 Choosing a cell name

The entire test environment is built in a standalone top level domain
".efs".  The test environment will be in test.efs, and the bootstrap
environment in boot.efs.  The efs_virtual_machine script requires two
arguments: the cell name, and the function of the machine being built.
The cell name must be something like:

    t.location.campus.region.test.efs

The only part of the cell name that really matters is the location, as
the hostnames will be created using the location name as a prefix.
The EFS development team uses the following boot.efs cell names, for
example:

    d.mad.sea.us.boot.efs
    d.fh.nyc.us.boot.efs

This results in hostnames like "madcore", and "fhefsd01", and even
though all of these *.efs cells are standalone, it's easy to manage
access to each others development environments, since we coordinated
the cell names, and the hostnames are all unique.

For these examples, we'll use t.foo.baz.reg.test.efs as the sample
cell name.

=head3 Configuring the core server

The first VM must be an x86_64 CentOS 5.4 or newer server.  The other
test machine pairs can be any supported EFS client operating .
However, the code to setup the core services has only been tested on
CentOS 5.4 and 5.5.

Copy the efs_virtual_machine script to the server, and run it as
follows:

    efs_virtual_machine t.foo.baz.reg.test.efs core

This will auto-configure a long list of operating system services, and
then reboot the machine when successful.  Once the core server has
finished it's first reboot, then and only then, can you configure the
other test.efs servers.

=head3 Configuring the test machine pairs

The EFS test suite requires a pair of machines, and you can create
multiple test pairs for running the test suite on different platforms.
One of the two will serve as the primary server on which the test
suite is run, and the other will serve as a remote cell/efsserver for
the purposes of the test suite.  These machines must be created in
pairs, and the hostnames matter.  The 01 host goes with 02, 03 with
04, etc.

Create a pair of VMs, and on one run:

    efs_virtual_machine t.foo.baz.reg.test.efs efst01

and on the other:

    efs_virtual_machine t.foo.baz.reg.test.efs efst02

The client services will be auto-configured, and both VMs rebooted
when successful.

Additional machine pairs can be created using "efst03" and "efst04".
The efs_virtual_machine script has support for names through 09 and
10.

=head2 Building the boot.efs Virtual Machines

The boot.efs setup is for the purpose of testing the procedures for
bootstrapping a new EFS domain.  We also use this environment to
bootstrap the binary content of EFS that is shared via openefs.org,
for each new platform that EFS is ported to.  This is still part of
the dataless development environment, and the goal is to acheive
complete reproducibility of the entire infrastructure from the ground
up.

The cell name for the boot.efs environment must begin with "d", and
end in "boot.efs".  The location name will be used as the prefix for
the auto-generated hostnames, so if you are setting up both a test.efs
and boot.efs environment, make up two cell names with different
locations.

Since efs_virtual_machine is used to create all of them, they can
co-exist, since a different set of fixed host IP addresses is used for
each domain.

=head3 Configuring the core server

The core server for boot.efs is very similar to the core server for
test.efs, but they are required to be separate machines.  The same
requirement for CentOS 5.4 or 5.5 holds for boot.efs as well.

Copy efs_virtual_machine to the new VM and run:

    efs_virtual_machine d.bar.baz.reg.boot.efs core

This will do the same thing is does for the test.efs server: Configure
core services and reboot.  Once the core server has finished it's
first reboot, then and only then, can you configure the other boot.efs
servers.

=head3 Configuring the initial EFS server

The initial EFS server is the next machine you have to build.  This is
the machine you will use to run the bootstrap code, and it will become
the EFS server for the initial dev cell that will be created.

This machine is configured using:

    efs_virtual_machine d.bar.baz.reg.boot.efs efsd01

In this example, the resulting hostname will be barefsd01.

=head3 Configuring compile servers

The primary EFS server can also double as a compile server for
whatever platform it is.  Assuming you use a 64 bit platform for your
EFS server, you will at least need 32 bit compile server for the same
OS.

The convention the EFS team is using is to create odd/even compile
server pairs for the 32 and 64 bit platforms for a given OS.  For example:

    Hostname          Platform
    --------          --------
    barcomp01         x86-32.rhel.5
    barcomp02         x86-64.rhel.5
    barcomp03         x86-32.debian.5.0
    barcomp04         x86-64.debian.5.0
    barcomp05         x86-32.ubuntu.9.10
    barcomp06         x86-64.ubuntu.9.10
    barcomp07         x86-32.freebsd.8.0
    barcomp08         x86-64.freebsd.8.0

Each machine is configured by creating a bare, vanilla installation of
the desired platform, and then running:

    efs_virtual_machine d.bar.baz.reg.boot.efs compXX

The mapping from hostname to platform is managed in the efsdeploy
platforms.conf file.  See the efsdeploy documentation, or the Content
Porting Guide for more information.

=head2 Running the EFS Test Suite

In this example, we're assuming a test pair named fooefst01 and
fooefst02.  In all cases, you normally only need to work on the
primary test server (the odd numbered one).

We assume that you are using the user "efstest", which is setup for
this purpose by efs_virtual_machine, and that the efs-core source tree
you are testing is in
/home/efstest/dev/efs/core/branches/cool-new-feature.

=head3 As efstest on fooefst01

The default bash configuration for efstest should prepend /usr/efs/bin
to the PATH, but make sure you are using /usr/efs/bin/perl.

    cd /home/efstest/dev/efs/core/branches/cool-new-feature/source
    perl Makefile.PL && make

=head3 As root on fooefst01

The root shell does NOT include /usr/efs/bin in the PATH by default,
to add it:

    PATH=/usr/efs/bin:$PATH
    cd /home/efstest/dev/efs/core/branches/cool-new-feature/source
    prove -v -r test

This will run the entire test suite, from start to finish.

=head2 Compiling and Updating the usr-efs tarballs

This is how to create the usr-efs-YYYY-MM-DD tarballs that are used by
efs_bootstrap_install to setup /usr/efs.  Note that we're only
creating these for the 64 bit platforms, since you only need to use
this on one machine to get things bootstrapped.  The
efs-core-bootstrap tarballs, however, are needed on each and every
platform that will eventually be supported, so we build those for both
32 and 64 bit OSes.

First create the empty target directory:

    mkdir /usr/efs-YYYY-MM-DD
    ln -s efs-YYYY-MM-DD /usr/efs

In the root directory of the efs-core source tree, run
efs_bootstrap_install as root, as follows:

    ./util/efs_bootstrap_install --perl=source --skip=efs

It is important that you NOT install EFS into this directory
structure.  The whole point is to build perl and all the pre-requisite
CPAN modules without EFS.

Once the build is finished package it up:

    cd /
    tar zcf /var/tmp/usr-efs-YYYY-MM-DD.tgz \
        usr/efs-YYYY-MM-DD/bin usr/efs-YYYY-MM-DD/lib usr/efs-YYYY-MM-DD/man

NOTE: Listing all three subdirs will skip the src subdir, which is
huge, and not required for reuse of the binary contents (of course).

For a platform of x86-64.rhel.5, this tarball would then be uploaded to:

    ftp-osl.osuosl.org:~/data/packages/bootstrap/x86-64.rhel.5

To make this the default "devel" or "stable" tarball which is
downloaded, change the appropriate symlinks.

    ssh ftp-osl.osuosl.org
    cd ~/data/packages/bootstrap/x86-64.rhel.5
    rm usr-efs-devel.tgz
    ln -s usr-efs-YYYY-MM-DD.tgz usr-efs-devel.tgz

=head2 Compiling and Updating the efs-core-bootstrap tarballs

=head2 Updating the minicpan tarball

In order to recreate the minicpan tarball, which is effectively a
point in time snapshot of the subset of CPAN used to build and test
the EFS software, repeat the procedure for creating a new usr-efs
tarball with the following command line:

    ./util/efs_bootstrap_install --perl=source --skip=efs --nominicpan

This will cause cpanp to download the specific CPAN modules needed
from cpan.org directly.  Once the build is finished, then be sure to
install the resulting /usr/efs onto both test.efs efsservers, and
verify that the test suite runs to completion without errors.  This is
critical.  In the past, we have seen lots of instability caused by
subtle issues with the interaction of the various modules we depend
on, some of which are extremely complex frameworks.

Once this is done, then the minicpan directory can be created by
copying the data from the cpanplus installation into /home/minicpan.
This is done by running:

    cpanplus2minicpan.pl

This script is part of the efs-utils git repository.  This will
convert /usr/efs/src/.cpanplus contents into a minicpan repository
in /home/minicpan/YYYY-MM-DD.  See the script for options.

Then simply tar up the YYYY-MM-DD directory into a tarball:

    cd /home/minicpan
    tar zcf YYYY-MM-DD.tgz YYYY-MM-DD

This can then be uploaded to:

    ftp-osl.osuosl.org:~/data/packages/minicpan

And the devel.tgz and/or stable.tgz symlinks in that directory
updated, if appropriate.

=cut
