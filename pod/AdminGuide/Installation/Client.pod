
=head1 Boostrapping the Client Environment

This document will discuss how to bootstrap the EFS client
environment, once the server environment has been successfully
bootstrapped.

=head1 Initial Requirements

If it's not yet obvious, you have to complete the procedures
documented in "Bootstrapping the Server Environment".  This process is
similar, but far simpler.

=head2 EFS Compile Hosts

The EFS administrators, and any team who will be building content for
/efs/dist for that matter, needs to have access to at least one client
for each platform you wish to support in your environment.  Although
additional client platforms can certainly be added at a later date, it
is orders of magnitude more complex to accomplish once the environment
has been completely bootstrapped, and especially after you have
deployed prod cells and clients.

Note that these machines will be used to compile platform-specific
content for /efs, and they will in general NOT be used as EFS servers.
Having said that, it is prefectly reasonable to use the initial EFS
server to satisfy the requirement for one of the platforms, but once
the EFS domain goes "live", the EFS server should be used exclusively
for efsd.  In fact, since` the only machine on which you have a
working EFS installation at the of the server bootstrap process is the
initial EFS server, you have to use it to complete the client
bootstrap process.

Once the client bootstrap process is complete, then you can install
and configure dedicated compile servers for the primary EFS server's
platform, since you will be able to run the EFS client on any machine
of the same platform.

=head1 Creating the efs/core/bootstrap installs

The efs_bootstrap_namespace script will create a pair of installs in
the efs/core/bootstrap release for the 64 and 32 bit versions of the
platform on whcih you performed the initial bootstrap.  Assuming you
used x86-64.rhel.5 for the initial EFS server, then you will get
installs for both:

    x86-64.rhel.5
    x86-32.rhel.5

If you plan to bootstrap other client platforms, then you will need to
create additional installs for these clients.  For example, if you
also plan to bootstrap Ubuntu 9.10, then you will need to create these
installs.  As efsops, simply run the following pair of commands:

    efs create install efs core bootstrap x86-64.ubuntu.9.10
    efs create install efs core bootstrap x86-32.ubuntu.9.10

Once you have created the initial set of installs, then you can build
the client packages, and bring up the EFS client on hosts of platform.

=head1 Building the efsclient/efsserver packages

=head2 Building the RPMs

Building the efsclient and efsserver rpms is extremely simple:

    cd /path/to/efs/source
    cd packages/rhel
    make

This will create a pair of RPMS in the blib/packages/rhel directory
(relative to the root of the EFS source tree itself):

    blib/packages/rhel/efscleint-$version-noarch.rpm
    blib/packages/rhel/efsserver-$version-noarch.rpm

Where $version is the VERSION string from EFS.pm.

=head2 Building the Debian/Ubuntu packages

Not yet supported.

=head2 Building the Solaris packages

Not yet supported.

=head1 Installing the EFS server

Before we continue with the EFS client bootstrap process, first
install the efsserver rpm/package onto your primary EFS server.  This
will ensure that if you reboot this machine, efsd will restart, and
your cell will remain functional.

=head2 Installing the efsserver rpm

This is as simple as:

    rpm -iv /path/to/efsserver-$version-noarch.rpm

No additional configuration is required, however the EFS server also
requires the efsclient rpm as well as the efsserver rpm, which we
document next.

=head1 Installing and configuring the EFS client

Installing the efsclient rpm is as simple as:

    rpm -iv /path/to/efsclient-$version-noarch.rpm

Configuring the client requires writing /etc/efs/client.conf, but at
this point in the process, simple copy this file from the initial EFS
server (it is autogenerated by efs_bootstrap_domain).  
=head2 Installing the RPMs

=head2 Installiing the Debian/Ubuntu packages

Not yet supported.

=head2 Installing the Solaris packages

Not yet supported.

=head1 Starting the EFS client

Installing the rpm and writing the client.conf file doens't actually
mount anything.  Next, you have to "start" the efsclient, which just
means running the efsclient boot script to create the static EFS NFS
mounts.  

On RHEL, CentOS and Fedora, simply run:

    service efsclient start

On all other platforms,

    /etc/init.d/efsclient start

This should create 4 NFS mounts, and look something like this:

$servername:/vol/efs_dist/efs_qtree/amd64.rhel.5/dist
                      16220096   2118496  13264384  14% /.efs/dist
$servername:/vol/efs_dist/efs_qtree/dist
                      16220096   2118496  13264384  14% /efs/dist
$servername:/vol/efs_dev_d_gnu/efs_qtree/amd64.rhel.5/dev
                      16220096   2118496  13264384  14% /.efs/dev
$servername:/vol/efs_dev_d_gnu/efs_qtree/global
                      16220096   2118496  13264384  14% /efs/dev

On the EFS server, where the client NFS mounts have already been
created, you do not need to start the client, but you do need to
install it.

To fully verify that the client works correctly, reboot the client.

=head1 Installing EFS into efs/core/bootstrap

Now that you have the EFS client running on client machines for each
of the client platforms you wish to bootstrap, you need to re-run
efs_bootstrap_install.

This time, you do B<NOT> run the script as root, you run it as the
efsops user.  The installation of EFS into efs/core/bootstrap will not
work if performed as root, because the only client on which root has
write access to the /efs/dev namespace is the EFS server itself, by
design.  On each of the client platforms, copy the EFS source code
local to that client (somewhere in /var/tmp, for example), and then run:

    ./util/efs_bootstrap_install

The script will automatically install into efs/core/bootstrap, if
there is an install for that client platform, otherwise, it defaults
to installing locally into /usr/efs.  Since the efs CLI is not yet
available until after this command completes, it can not create the
installs dynamically.  This is why you must pre-create them, as
described above.

When the efs_bootstrap_install script has completed, then you should
be able to use the efs CLI immediately.  Test the efs CLI by running a
simple command as follows:

    PATH=/efs/dist/efs/core/bootstrap/exec/bin:$PATH
    efs display cell

=head1 The Results

Once the efs_bootstrap_install script has been successfully run on all
of your client platforms, then you can move on to bootstrapping the
content of the /efs namespace.
